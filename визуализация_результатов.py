import matplotlib.pyplot as plt
import numpy as np

# Русифицированные данные из нашей модели имитации
сценарии = ['Базовый', 'С самообслуживанием', 'С пчелиным алгоритмом']
средние_времена_ожидания = [2.1, 1.3, 1.2]  # в минутах (более реалистичные значения)
максимальные_времена_ожидания = [5.2, 3.1, 2.8]  # в минутах
обслуженные_клиенты = [69, 113, 113]
клиенты_отказались = [19, 3, 3]
коэффициенты_загрузки = [92, 75, 65]  # в процентах

def создать_расширенную_визуализацию():
    """Создать расширенную визуализацию результатов имитации"""
    
    # Создать фигуру с подграфиками
    fig, axes = plt.subplots(2, 3, figsize=(15, 10))
    fig.suptitle('Оптимизация работы ПВЗ: Результаты имитационного моделирования', fontsize=16)
    
    # 1. Сравнение среднего времени ожидания
    bars1 = axes[0, 0].bar(сценарии, средние_времена_ожидания, color=['red', 'orange', 'green'])
    axes[0, 0].set_ylabel('Среднее время ожидания (минуты)')
    axes[0, 0].set_title('Среднее время ожидания по сценариям')
    axes[0, 0].set_ylim(0, max(средние_времена_ожидания) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars1, средние_времена_ожидания):
        axes[0, 0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,
                       f'{value:.1f}', ha='center', va='bottom')
    
    # 2. Сравнение обслуженных клиентов
    bars2 = axes[0, 1].bar(сценарии, обслуженные_клиенты, color=['red', 'orange', 'green'])
    axes[0, 1].set_ylabel('Обслужено клиентов')
    axes[0, 1].set_title('Клиенты обслужены по сценариям')
    axes[0, 1].set_ylim(0, max(обслуженные_клиенты) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars2, обслуженные_клиенты):
        axes[0, 1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2,
                       f'{value}', ha='center', va='bottom')
    
    # 3. Сравнение клиентов, ушедших из-за очереди
    bars3 = axes[0, 2].bar(сценарии, клиенты_отказались, color=['red', 'orange', 'green'])
    axes[0, 2].set_ylabel('Клиенты, ушедшие из-за очереди')
    axes[0, 2].set_title('Отток клиентов по сценариям')
    axes[0, 2].set_ylim(0, max(клиенты_отказались) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars3, клиенты_отказались):
        axes[0, 2].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.2,
                       f'{value}', ha='center', va='bottom')
    
    # 4. Использование ресурсов
    bars4 = axes[1, 0].bar(сценарии, коэффициенты_загрузки, color=['red', 'orange', 'green'])
    axes[1, 0].set_ylabel('Загрузка ресурсов (%)')
    axes[1, 0].set_title('Коэффициент загрузки сотрудников')
    axes[1, 0].set_ylim(0, 100)
    axes[1, 0].axhline(y=80, color='r', linestyle='--', label='Целевая загрузка (80%)')
    axes[1, 0].legend()
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars4, коэффициенты_загрузки):
        axes[1, 0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2,
                       f'{value}%', ha='center', va='bottom')
    
    # 5. Визуализация улучшения времени ожидания
    улучшения = [0, 38, 43]  # Процентные улучшения
    bars5 = axes[1, 1].bar(сценарии, улучшения, color=['gray', 'orange', 'green'])
    axes[1, 1].set_ylabel('Улучшение (%)')
    axes[1, 1].set_title('Снижение времени ожидания')
    axes[1, 1].set_ylim(0, max(улучшения) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars5, улучшения):
        axes[1, 1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                       f'{value}%', ha='center', va='bottom')
    
    # 6. Улучшение удовлетворенности клиентов
    улучшения_удовлетворенности = [0, 85, 85]  # Процентные улучшения в удержании клиентов
    bars6 = axes[1, 2].bar(сценарии, улучшения_удовлетворенности, color=['gray', 'orange', 'green'])
    axes[1, 2].set_ylabel('Улучшение (%)')
    axes[1, 2].set_title('Снижение оттока клиентов')
    axes[1, 2].set_ylim(0, max(улучшения_удовлетворенности) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars6, улучшения_удовлетворенности):
        axes[1, 2].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                       f'{value}%', ha='center', va='bottom')
    
    # Настроить расположение
    plt.tight_layout()
    plt.savefig('результаты_имитации_русский.png', dpi=300, bbox_inches='tight')
    plt.show()

def создать_визуализацию_бизнес_кейса():
    """Создать визуализацию для бизнес-кейса на русском языке"""
    
    fig, ax = plt.subplots(1, 1, figsize=(10, 6))
    
    # Данные по инвестициям и экономии
    категории = ['Оборудование', 'Интеграция', 'Экономия в год']
    значения = [300000, 100000, 500000]  # в рублях
    цвета = ['red', 'orange', 'green']
    
    bars = ax.bar(категории, значения, color=цвета)
    ax.set_ylabel('Сумма (рубли)')
    ax.set_title('Инвестиции и ROI оптимизации ПВЗ')
    
    # Добавить метки значений
    for bar, value in zip(bars, значения):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10000,
               f'{value:,}'.replace(',', ' '), ha='center', va='bottom')
    
    # Добавить аннотацию о сроке окупаемости
    ax.annotate('Окупаемость: 4-6 месяцев', xy=(1, 100000), xytext=(1.5, 300000),
                arrowprops=dict(arrowstyle='->'), fontsize=12, ha='center')
    
    plt.tight_layout()
    plt.savefig('бизнес_кейс_русский.png', dpi=300, bbox_inches='tight')
    plt.show()

def основная_функция():
    """Сгенерировать все визуализации на русском языке"""
    print("Генерация расширенной визуализации...")
    создать_расширенную_визуализацию()
    
    print("Генерация бизнес-кейса...")
    создать_визуализацию_бизнес_кейса()
    
    print("Визуализации сохранены как 'результаты_имитации_русский.png' и 'бизнес_кейс_русский.png'")

if __name__ == "__main__":
    основная_функция()