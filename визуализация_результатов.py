import matplotlib.pyplot as plt
import numpy as np
import json
import os

# Загрузить данные из файла результатов моделирования
def загрузить_данные_моделирования():
    """Загрузить данные моделирования из файла результатов"""
    if os.path.exists('результаты_моделирования.json'):
        with open('результаты_моделирования.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        # Если файл не существует, использовать тестовые данные
        print("Файл результатов моделирования не найден. Используются тестовые данные.")
        return {
            'сценарии': ['Базовый', 'С самообслуживанием', 'С пчелиным алгоритмом'],
            'средние_времена_ожидания': [2.1, 1.3, 1.2],
            'максимальные_времена_ожидания': [5.2, 3.1, 2.8],
            'обслуженные_клиенты': [69, 113, 113],
            'клиенты_отказались': [19, 3, 3],
            'коэффициенты_загрузки': [92, 75, 65],
            'улучшения': [0, 38, 43],
            'улучшения_удовлетворенности': [0, 85, 85]
        }

# Загрузить данные
данные = загрузить_данные_моделирования()
сценарии = данные['сценарии']
средние_времена_ожидания = данные['средние_времена_ожидания']
максимальные_времена_ожидания = данные['максимальные_времена_ожидания']
обслуженные_клиенты = данные['обслуженные_клиенты']
клиенты_отказались = данные['клиенты_отказались']
коэффициенты_загрузки = данные['коэффициенты_загрузки']

# Если данные об улучшениях есть в файле, использовать их, иначе рассчитать
if 'улучшения' in данные:
    улучшения = данные['улучшения']
else:
    # Рассчитать улучшения времени ожидания
    базовое_время = средние_времена_ожидания[0]
    if базовое_время > 0:
        улучшения = [0]  # Базовый сценарий
        for i in range(1, len(средние_времена_ожидания)):
            улучшение = ((базовое_время - средние_времена_ожидания[i]) / базовое_время) * 100
            улучшения.append(max(0, улучшение))
    else:
        улучшения = [0] * len(средние_времена_ожидания)

if 'улучшения_удовлетворенности' in данные:
    улучшения_удовлетворенности = данные['улучшения_удовлетворенности']
else:
    # Рассчитать улучшение удовлетворенности клиентов
    базовые_отказы = клиенты_отказались[0]
    if базовые_отказы > 0:
        улучшения_удовлетворенности = [0]  # Базовый сценарий
        for i in range(1, len(клиенты_отказались)):
            улучшение = ((базовые_отказы - клиенты_отказались[i]) / базовые_отказы) * 100
            улучшения_удовлетворенности.append(max(0, улучшение))
    else:
        улучшения_удовлетворенности = [0] * len(клиенты_отказались)

def создать_расширенную_визуализацию():
    """Создать расширенную визуализацию результатов имитации"""
    
    # Создать фигуру с подграфиками с улучшенным размером и интервалами
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('Оптимизация работы ПВЗ: Результаты имитационного моделирования', fontsize=16)
    
    # Увеличить расстояние между подграфиками
    plt.subplots_adjust(hspace=0.4, wspace=0.3)
    
    # 1. Сравнение среднего времени ожидания
    bars1 = axes[0, 0].bar(сценарии, средние_времена_ожидания, color=['red', 'orange', 'green'])
    axes[0, 0].set_ylabel('Среднее время ожидания (минуты)')
    axes[0, 0].set_title('Среднее время ожидания по сценариям')
    axes[0, 0].set_ylim(0, max(средние_времена_ожидания) * 1.3)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars1, средние_времена_ожидания):
        axes[0, 0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(средние_времена_ожидания) * 0.02,
                       f'{value:.3f}', ha='center', va='bottom', fontsize=10)
    
    # 2. Сравнение обслуженных клиентов
    bars2 = axes[0, 1].bar(сценарии, обслуженные_клиенты, color=['red', 'orange', 'green'])
    axes[0, 1].set_ylabel('Обслужено клиентов')
    axes[0, 1].set_title('Клиенты обслужены по сценариям')
    axes[0, 1].set_ylim(0, max(обслуженные_клиенты) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars2, обслуженные_клиенты):
        axes[0, 1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(обслуженные_клиенты) * 0.02,
                       f'{value:.0f}', ha='center', va='bottom', fontsize=10)
    
    # 3. Сравнение клиентов, ушедших из-за очереди
    bars3 = axes[0, 2].bar(сценарии, клиенты_отказались, color=['red', 'orange', 'green'])
    axes[0, 2].set_ylabel('Клиенты, ушедшие из-за очереди')
    axes[0, 2].set_title('Отток клиентов по сценариям')
    axes[0, 2].set_ylim(0, max(клиенты_отказались) * 1.2)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars3, клиенты_отказались):
        axes[0, 2].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(клиенты_отказались) * 0.02,
                       f'{value:.0f}', ha='center', va='bottom', fontsize=10)
    
    # 4. Использование ресурсов
    bars4 = axes[1, 0].bar(сценарии, коэффициенты_загрузки, color=['red', 'orange', 'green'])
    axes[1, 0].set_ylabel('Загрузка ресурсов (%)')
    axes[1, 0].set_title('Коэффициент загрузки сотрудников')
    axes[1, 0].set_ylim(0, 100)
    axes[1, 0].axhline(y=80, color='r', linestyle='--', label='Целевая загрузка (80%)')
    axes[1, 0].legend()
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars4, коэффициенты_загрузки):
        axes[1, 0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2,
                       f'{value:.0f}%', ha='center', va='bottom', fontsize=10)
    
    # 5. Визуализация улучшения времени ожидания (с учетом отрицательных значений)
    bars5 = axes[1, 1].bar(сценарии, улучшения, color=['gray' if x >= 0 else 'red' for x in улучшения])
    axes[1, 1].set_ylabel('Улучшение (%)')
    axes[1, 1].set_title('Изменение времени ожидания')
    axes[1, 1].set_ylim(min(улучшения) * 1.2 if min(улучшения) < 0 else 0, 
                        max(улучшения) * 1.2 if max(улучшения) > 0 else 100)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars5, улучшения):
        axes[1, 1].text(bar.get_x() + bar.get_width()/2, 
                       bar.get_height() + (max(улучшения) * 0.02 if bar.get_height() >= 0 else min(улучшения) * 0.02),
                       f'{value:.1f}%', ha='center', va='bottom', fontsize=10)
    
    # 6. Улучшение удовлетворенности клиентов
    bars6 = axes[1, 2].bar(сценарии, улучшения_удовлетворенности, color=['gray', 'orange', 'green'])
    axes[1, 2].set_ylabel('Улучшение (%)')
    axes[1, 2].set_title('Снижение оттока клиентов')
    axes[1, 2].set_ylim(0, max(улучшения_удовлетворенности) * 1.2 if max(улучшения_удовлетворенности) > 0 else 100)
    
    # Добавить метки значений на столбцах
    for bar, value in zip(bars6, улучшения_удовлетворенности):
        axes[1, 2].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(улучшения_удовлетворенности) * 0.02 if max(улучшения_удовлетворенности) > 0 else 1,
                       f'{value:.1f}%', ha='center', va='bottom', fontsize=10)
    
    # Настроить расположение
    plt.tight_layout()
    plt.savefig('результаты_имитации_русский.png', dpi=300, bbox_inches='tight')
    plt.show()

def создать_визуализацию_бизнес_кейса():
    """Создать визуализацию для бизнес-кейса на русском языке"""
    
    fig, ax = plt.subplots(1, 1, figsize=(10, 6))
    
    # Данные по инвестициям и экономии
    категории = ['Оборудование', 'Интеграция', 'Экономия в год (консервативная)', 'Доп. эффект (оптимистичный)']
    значения = [300000, 100000, 500000, 460000]  # в рублях
    цвета = ['red', 'orange', 'green', 'lightgreen']
    
    bars = ax.bar(категории, значения, color=цвета)
    ax.set_ylabel('Сумма (рубли)')
    ax.set_title('Инвестиции и ROI оптимизации ПВЗ')
    
    # Добавить метки значений
    for bar, value in zip(bars, значения):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10000,
               f'{value:,}'.replace(',', ' '), ha='center', va='bottom')
    
    # Добавить аннотации о сроках окупаемости
    ax.annotate('Окупаемость: 9.6 месяцев\n(консервативный сценарий)', 
                xy=(1.5, 250000), xytext=(0.5, 400000),
                arrowprops=dict(arrowstyle='->'), fontsize=10, ha='center')
    
    ax.annotate('Окупаемость: 4-6 месяцев\n(оптимистичный сценарий)', 
                xy=(2.5, 230000), xytext=(3.5, 400000),
                arrowprops=dict(arrowstyle='->'), fontsize=10, ha='center')
    
    plt.tight_layout()
    plt.savefig('бизнес_кейс_русский.png', dpi=300, bbox_inches='tight')
    plt.show()

def основная_функция():
    """Сгенерировать все визуализации на русском языке"""
    print("Генерация расширенной визуализации...")
    создать_расширенную_визуализацию()
    
    print("Генерация бизнес-кейса...")
    создать_визуализацию_бизнес_кейса()
    
    print("Визуализации сохранены как 'результаты_имитации_русский.png' и 'бизнес_кейс_русский.png'")

if __name__ == "__main__":
    основная_функция()